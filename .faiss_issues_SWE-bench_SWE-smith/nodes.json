[{"id_": "cb880e5b-5972-44ca-9a12-785d835678f8", "embedding": null, "metadata": {"issue_id": 45, "title": "LM-Rewrite Instances Not Working", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f29580d3-ebce-4e67-aa47-4d27ee2723b0", "node_type": "4", "metadata": {"issue_id": 45, "title": "LM-Rewrite Instances Not Working", "state": "closed", "labels": [], "type": "issue"}, "hash": "8597c024964ff1238f15bb6de8af7e54c34780fb3f3cb7d5d15fab9f02a3f928", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: LM-Rewrite Instances Not Working\n\nDescription: If I run the rollout with the lm_rewrite instances, all have the same type of errors. See one example below. Any clue? [CODE_BLOCK]\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 200, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "8da674bf-d89a-42b7-bb5a-54a45c5751e1", "embedding": null, "metadata": {"issue_id": 43, "title": "Add support for Java", "state": "open", "labels": ["enhancement", "good first issue"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "57c1484d-10b5-47b5-ad28-5a1d087bbee8", "node_type": "4", "metadata": {"issue_id": 43, "title": "Add support for Java", "state": "open", "labels": ["enhancement", "good first issue"], "type": "issue"}, "hash": "2b05f24fd021b5e786094caa2982839a0411ba01d15f49dcc2fe6dba82ae83bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Add support for Java\n\nDescription: See adapters/ for examples.\n\nState: open\n\nLabels: enhancement good first issue\n\nCategories: category-enhancement category-good first issue\n\nType: Feature request or enhancement", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 218, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "cdb23af8-d3f7-4ba5-9f16-6a4eca5359a4", "embedding": null, "metadata": {"issue_id": 42, "title": "Add support for C++", "state": "open", "labels": ["enhancement", "good first issue"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fe7bd042-4457-41dd-bcae-9a1ce8e16df1", "node_type": "4", "metadata": {"issue_id": 42, "title": "Add support for C++", "state": "open", "labels": ["enhancement", "good first issue"], "type": "issue"}, "hash": "68b63be705ee2f6a76134a4dad5b26c08bd6f887e8ad77140bdfdee3e4ec543d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Add support for C++\n\nDescription: See adapters/ for examples.\n\nState: open\n\nLabels: enhancement good first issue\n\nCategories: category-enhancement category-good first issue\n\nType: Feature request or enhancement", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 217, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "2f45e6e4-a461-4483-adb6-95138cca5333", "embedding": null, "metadata": {"issue_id": 41, "title": "Add support for JavaScript / Typescript", "state": "open", "labels": ["enhancement", "good first issue"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ed4e099b-9801-4a92-9d5c-73af529bf250", "node_type": "4", "metadata": {"issue_id": 41, "title": "Add support for JavaScript / Typescript", "state": "open", "labels": ["enhancement", "good first issue"], "type": "issue"}, "hash": "fd87a89a606231a936e016a66276812b465e22e3205ad318e9b8e34e68083048", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Add support for JavaScript / Typescript\n\nDescription: See adapters/ for examples.\n\nState: open\n\nLabels: enhancement good first issue\n\nCategories: category-enhancement category-good first issue\n\nType: Feature request or enhancement", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 237, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "f1ad0f0a-2e9d-4e9a-af5b-c53a9d0ade29", "embedding": null, "metadata": {"issue_id": 40, "title": "Remove `tree-sitter-languages` dependency", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df0d0be8-3c43-4e1c-88d1-7671bfd7d0dc", "node_type": "4", "metadata": {"issue_id": 40, "title": "Remove `tree-sitter-languages` dependency", "state": "open", "labels": [], "type": "issue"}, "hash": "2bff537c3d4bd224f328cb915724e53598a93914a061df492a0064ee94a5a6a3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Remove `tree-sitter-languages` dependency\n\nDescription: As @acrmp pointed out here, the tree-sitter-languages dependency is no longer maintained (and tree-sitter is also currently constrained to a specific version to account for this. We should modify the repository such that this dependency is removed, and we instead download the corresponding language specific tree-sitter binaries.\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 406, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "ac171626-0497-4846-b3e7-6d640cf97bb0", "embedding": null, "metadata": {"issue_id": 39, "title": "Change `constants.py` into `RepoEntity` set of classes", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f70b19ac-5549-40e7-b935-e7e2afb6d1b1", "node_type": "4", "metadata": {"issue_id": 39, "title": "Change `constants.py` into `RepoEntity` set of classes", "state": "open", "labels": [], "type": "issue"}, "hash": "464e5abba469abfaac29351d1deaff124ad8cf756571615e4b7372c0ceada6eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Change `constants.py` into `RepoEntity` set of classes\n\nDescription: See this comment for inspiration. Copy+pasted: > I'm starting to think that perhaps creating repository \"profiles\" is the best way to scale up. Currently, the constants.py is quite long, and it takes quite a bit of familiarity with the codebase to understand which repositories have which settings, e.g. > * what language version? > * what is the testing command? > * what is the log parser > > Among many more. Adding more repository specific customizations is also a bit of a pain with the current setup. > > I think I'll incorporate this very soon, where perhaps we define a \"RepoEntity\" class attributes (similar to CodeEntity, and create a subclass for each repository. By default, the RepoEntity can just inherit the common conventions of how a repository is used, but then if customization is required, it can be easily done in the\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 927, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "425fa812-113e-4335-8927-3ec218cf41dd", "embedding": null, "metadata": {"issue_id": 38, "title": "Improve parsing for Go", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "cded47be-b033-405e-beab-a2fe33cf7cd2", "node_type": "4", "metadata": {"issue_id": 38, "title": "Improve parsing for Go", "state": "open", "labels": [], "type": "issue"}, "hash": "38f64dfa1860101599419d26e1a4b707706b5ae8ce5c5ecbc464d681e5f35bf1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Improve parsing for Go\n\nDescription: The initial GoEntity implementations for stub and signature may not work for older versions of Go due to an assumption on { being the \"separator\" for the function header and implementation. The GoEntity implementation should be refactored to account for this.\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 316, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "dc358089-d3cf-40d0-a73a-8c6cc8118df2", "embedding": null, "metadata": {"issue_id": 37, "title": "Move complexity criteria / calculations to be CodeEntity properties", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3f7de8a5-0ee2-427f-833a-403427775342", "node_type": "4", "metadata": {"issue_id": 37, "title": "Move complexity criteria / calculations to be CodeEntity properties", "state": "closed", "labels": [], "type": "issue"}, "hash": "532c04fd69f74e18ed64f0842db81ba95d087bd9f94cecaa33549319d2aa40b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Move complexity criteria / calculations to be CodeEntity properties\n\nDescription: The way complexity and whether certain CodeEntity objects fall under a certain criteria is currently maintained in a separate criteria.py file. After the merge of 28, this file should be removed, and determining if entities have certain properties or have n level complexity should be defined as properties of Code/Go/PythonEntity objects.\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 443, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "6b7c3bae-7341-4873-8ef3-6444471cee58", "embedding": null, "metadata": {"issue_id": 26, "title": "Running sanity check on the 128 repos", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a92ff307-b93b-414c-8682-0c905cff52b5", "node_type": "4", "metadata": {"issue_id": 26, "title": "Running sanity check on the 128 repos", "state": "open", "labels": [], "type": "issue"}, "hash": "9c6dc71a37461028314b1f6f86915c33e0179b9900748f2162843103d7727376", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Running sanity check on the 128 repos\n\nDescription: Hi, first let me say thank you for this great project. While trying to run the simple sanity check of applying the gold patch, I noticed some of the problem instances have flaky tests (i.e., gold patch doesn't consistently make the FAIL_TO_PASS tests pass). spulec__freezegun.5f171db0.combine_file__f3rcc5ea Running the tests multiple times yield different subset of tests that are still failing even after applying the gold patch. [CODE_BLOCK] Some other time, it just hangs on [CODE_BLOCK] Steps to reproduce I might have missed it, but I don't think there's a sanity_check script shipped with SWE-Smith, is that correct? In any case, a simple way to test it out is to use the released docker image and simply run the corresponding tests. Unless I'm mistaken, this should be equivalent to fetching and checking out the corresponding branch, and then applying the gold patch (i.e., the git apply --reverse ...), i.e. recovering the main branch. [CODE_BLOCK] facebookresearch__hydra.0f03eb60.func_pm_class_rm_base__48m43coc [CODE_BLOCK] Steps to reproduce [CODE_BLOCK]\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1140, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "b75e2dd8-f2a3-4f18-b091-811f2898f0cd", "embedding": null, "metadata": {"issue_id": 25, "title": "LoRA weights for difficulty labeler not available in documentation or huggingface.", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bffa9a5c-f59d-452a-b7bf-b0883f1f6156", "node_type": "4", "metadata": {"issue_id": 25, "title": "LoRA weights for difficulty labeler not available in documentation or huggingface.", "state": "closed", "labels": [], "type": "issue"}, "hash": "07ef8cf5f9050463be8906442ece2765aee65bb6c743f54e90c3dc32ac17672d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: LoRA weights for difficulty labeler not available in documentation or huggingface.\n\nDescription: Dear SWE-bench team, Could you please provide LoRA weights for the Qwen32b-instruct you trained to assign difficulty ratings to instances?\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 257, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "76aeeea2-d26f-45d2-bf9b-c789b9dfd219", "embedding": null, "metadata": {"issue_id": 24, "title": "SWE-Smith Reward Hacking Exploit", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0102df15-91a3-4f4f-bf8f-e4364f1989cf", "node_type": "4", "metadata": {"issue_id": 24, "title": "SWE-Smith Reward Hacking Exploit", "state": "open", "labels": [], "type": "issue"}, "hash": "194334317d2838ef9d581928e58810c2c123d30458d63572656968936747285a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: SWE-Smith Reward Hacking Exploit\n\nDescription: I've been training an LLM agent with RL on SWE-Smith tasks, and the model discovered a loophole in the evaluation where it can introduce a syntax error to some module that the target test case file depends on, causing pytest to fail during collection. This causes SWE-Smith to believe that all the test cases passed, since they did not show up in the output. This is due to the SWE-Smith's assumption that any test cases that do not show up in the output are passing correctly since it only runs a subset of the tests. Here is an example SWE-Smith and pytest output when the model is performing this reward hacking: Instance: conan-io__conan.86f29e13.combine_module__njgb7obz patch.diff: [CODE_BLOCK] test_output.txt: [CODE_BLOCK] run_instance.log: [CODE_BLOCK] I believe this code change in swesmith/harness/grading.py should fix the problem, however there may be a better way to fix it: [CODE_BLOCK]\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 968, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "8372d7ef-8288-4d5b-88d7-25c207c7c6f6", "embedding": null, "metadata": {"issue_id": 23, "title": "`xml_function_calling` parser not supported in SWE-agent, blocking reproduction of SWE-bench-Verified results", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f07abade-b9a0-44f9-89c0-87c9b1cc9a06", "node_type": "4", "metadata": {"issue_id": 23, "title": "`xml_function_calling` parser not supported in SWE-agent, blocking reproduction of SWE-bench-Verified results", "state": "closed", "labels": [], "type": "issue"}, "hash": "9232ae80de6308d254f66643cfbee8e5c6a2f58daeaf203152e45c219c826069", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: `xml_function_calling` parser not supported in SWE-agent, blocking reproduction of SWE-bench-Verified results\n\nDescription: Hi, thanks for your work. I\u2019m trying to reproduce the reported SWE-bench-Verified results of the SWE-bench-SWE-agent-LM-32B model using the provided configuration , but encountered an issue with the parser setup. Your config references a **parse_function**: xml_function_calling, which is not a valid parser in the current version of swe-agent. Running the config results in the following Pydantic validation error: [CODE_BLOCK] After switching to the closest supported alternative (xml_thought_action), the agent runs, but the LLM fails to produce the expected composite-format outputs. [CODE_BLOCK] Could you please clarify: - Was a custom xml_function_calling parser used internally? - Is there any patch or parser extension you could share to enable full compatibility with the released config? Thanks for your help!\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 966, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "b0c2bb94-82f7-4862-b759-132f8930b76a", "embedding": null, "metadata": {"issue_id": 22, "title": "Repetition Scaffold", "state": "closed", "labels": ["question"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e015044e-74ce-4a5b-8411-220eb7c12491", "node_type": "4", "metadata": {"issue_id": 22, "title": "Repetition Scaffold", "state": "closed", "labels": ["question"], "type": "issue"}, "hash": "69a7b489a33aa7fa41df611d0133a00a214cc3ba5e0139c13048b610ea7d22c8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Repetition Scaffold\n\nDescription: The paper mentions that there were warning messages and resampling added to the agent scaffold to discourage repetition. I could not find this in the SWE-agent repo. I was wondering where the code is? Thanks. !Image\n\nState: closed\n\nLabels: question\n\nCategories: category-question\n\nType: Question or help request", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 352, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "5dea1e79-aa9e-47e5-a1f2-fe3f1bc8b0f3", "embedding": null, "metadata": {"issue_id": 21, "title": "Question on training with SWE-Agent trajectory and context length", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43cb49eb-d813-4d5a-89e9-e8ce08c81feb", "node_type": "4", "metadata": {"issue_id": 21, "title": "Question on training with SWE-Agent trajectory and context length", "state": "open", "labels": [], "type": "issue"}, "hash": "7241192ebe2ece1a0d637caa3d23463670f2f9472d631aad7cfbf50bed27b63e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Question on training with SWE-Agent trajectory and context length\n\nDescription: Hi thanks for sharing the great work! I have one question regarding training with SWE-Agent trajectory in particular relates to history management and context length. My understanding is that the trajectory saved by SWE-Agent is complete history, but the actual input to the model go through some trimming in case there are too many turns and exceed context length. How is the context window managed when creating fine-tuning data? Is the same process for history context applied, or it keep all history and drop trajectories that exceed context?\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 646, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "8565d86a-d58c-47d5-b106-6080aafb1e6f", "embedding": null, "metadata": {"issue_id": 20, "title": "Make SWE-smith work for non-Python codebases.", "state": "open", "labels": ["enhancement", "help wanted"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "75fefd56-0c46-4e4c-8185-7ae52ee17383", "node_type": "4", "metadata": {"issue_id": 20, "title": "Make SWE-smith work for non-Python codebases.", "state": "open", "labels": ["enhancement", "help wanted"], "type": "issue"}, "hash": "05ca1db92f323465c895bbbcfa3226cb80e418128f2d0db008c9e7684f13262f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Make SWE-smith work for non-Python codebases.\n\nDescription: These thoughts are still very draft-stage and I'm thinking about what to put in CONTRIBUTING.md but I wanted to first gauge how much interest there is in making SWE-smith work for non-Python codebases. The over-arching goal that I think could be cool, is 1. To make SWE-smith work for any codebases that have good test coverage. 2. To continue scaling SWE-smith task instance collection (perhaps to 500k instances across 500 repos representing 10 languages by end of summer?) To this end, I think bug generation is probably the main thing that would need to be changed. I'm starting to think about / work on how to do SWE-smith for JS/TS as a very first step. Issue generation and any training related procedures already in the repo probably wouldn't change. But please feel free to comment if this seems interesting.\n\nState: open\n\nLabels: enhancement help wanted\n\nCategories: category-enhancement category-help wanted\n\nType: Feature request or enhancement", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1023, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "714e3933-38a2-4afd-90ec-e291fd8a9bcc", "embedding": null, "metadata": {"issue_id": 18, "title": "/opt/miniconda3/bin/activate not found", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "92a6c08f-dc9f-4671-be0f-b5263e90042c", "node_type": "4", "metadata": {"issue_id": 18, "title": "/opt/miniconda3/bin/activate not found", "state": "closed", "labels": [], "type": "issue"}, "hash": "7ca04664afed61a2fbc9c06bf0d5449ccf3587f93bcb0142cf9ad360aac4b849", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: /opt/miniconda3/bin/activate not found\n\nDescription: When trying to follow the tutorial to install the environment for MonkeyType, there is a error: $python -m swesmith.build_repo.try_install Instagram/MonkeyType install_repo.sh --commit 70c3acf62950be5dfb28743c7a719bfdecebcd84 > Building image for Instagram/MonkeyType at commit 70c3acf62950be5dfb28743c7a719bfdecebcd84 > Cloned Instagram/MonkeyType at commit 70c3acf62950be5dfb28743c7a719bfdecebcd84 > Installing repo... > Script: . /opt/miniconda3/bin/activate - conda create -n testbed python=3.10 -yq - conda activate testbed - . xxx/swe/install_repo.sh /bin/sh: /opt/miniconda3/bin/activate: No such file or directory My exact path of activate is /opt/conda/bin/activate, so I have to ln -s to the /opt/miniconda3/bin/activate\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 805, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "488ec23f-b667-4f88-bfb1-0957d9e0b472", "embedding": null, "metadata": {"issue_id": 17, "title": "Are there paper lists for progressive training?", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "99f363ae-7819-4a19-88bf-7d624ba00df8", "node_type": "4", "metadata": {"issue_id": 17, "title": "Are there paper lists for progressive training?", "state": "open", "labels": [], "type": "issue"}, "hash": "7146b1f5ecf049ce203080bc1a7bbf5c86459e4181e29922bbd0a754901a759f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Are there paper lists for progressive training?\n\nDescription: Currently, things like Absolute Zero or \"One Example\" training are gaining attention, and I am wondering if SWE-Smith can handle being trained incrementally (ideally there could be transferable knowledge) rather than \"brute-force\". But in most cases, model training or fine-tuning is bound to one single step rather than iterative problem solving. Could the discoveries be integrated into the system? https://arxiv.org/html/2505.03335v2 https://arxiv.org/html/2504.20571v1 In the same way, what other tools and techniques are there to accelerate models?\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 635, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "728aea8a-9424-4b2a-a8cf-ddfc29ddeb0c", "embedding": null, "metadata": {"issue_id": 14, "title": "Template for reproducing the SWE-Bench-Verified number", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "500daf20-404d-4baa-a884-23e012d77cf3", "node_type": "4", "metadata": {"issue_id": 14, "title": "Template for reproducing the SWE-Bench-Verified number", "state": "closed", "labels": [], "type": "issue"}, "hash": "557525aceb900aa47ef8a706419784863dab40be0c8cb5ea44ce09d89abb7ae3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Template for reproducing the SWE-Bench-Verified number\n\nDescription: Congrats on the nice work! I was trying to reproducing the reported SWE-Bench-Verified number ~40 for SWE-bench/SWE-agent-LM-32B. Since the model was trained on claude trajectories, I assumed the template to instantiate the SWE-Agent would be something like this one: https://github.com/SWE-agent/SWE-agent/blob/main/config/anthropic_filemap.yaml However, it doesn't quite work. For instance, the uploaded files are empty. Below is the first sentences for a particular instance. <uploaded_files>\\n\\n</uploaded_files>\\nI've uploaded a python code repository in the directory . As you can see, the uploaded_files are empty. I wonder if the authors could provide the template they used in the experiments for SWE-bench/SWE-agent-LM-32B and a bit more details on reproducing the results. Thanks!\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 882, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "4cdef052-4cf6-4936-a1a4-b9ed505ec360", "embedding": null, "metadata": {"issue_id": 13, "title": "Commit ID in environment name does not exist", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ed9f322-07be-424f-97a8-d985c1b3d906", "node_type": "4", "metadata": {"issue_id": 13, "title": "Commit ID in environment name does not exist", "state": "open", "labels": [], "type": "issue"}, "hash": "601e3f7058a5fd194d4d064f85e6b856bab36741740a2d98c754aaddc18ef637", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Commit ID in environment name does not exist\n\nDescription: For some docker environments like jyangballin/swesmith.x86_64.adrienverge_1776_yamllint.8513d9b9, if I try to run git reset --hard 8513d9b9 it fails and is unable to find the commit. Not sure if this means the environments are from an earlier commit than what is in the name Running git log outputs: [CODE_BLOCK]\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 391, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "87809385-3894-425c-9cb4-c5ee433c45a5", "embedding": null, "metadata": {"issue_id": 9, "title": "Question: Why are there 40k rows in SWE-Smith dataset without problem_statement?", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "48b9b0a9-f8a1-4720-8a71-7c4ff5ad9e1e", "node_type": "4", "metadata": {"issue_id": 9, "title": "Question: Why are there 40k rows in SWE-Smith dataset without problem_statement?", "state": "closed", "labels": [], "type": "issue"}, "hash": "76895996fabc2879bf177b86e95893ecf0879073d4814a239973f76823eea270", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Question: Why are there 40k rows in SWE-Smith dataset without problem_statement?\n\nDescription: SWE-Smith is an impressive work that has greatly inspired me. Thank you all for your excellent contributions! I noticed that in the SWE-Smith dataset, only about 10k rows have a non-empty problem_statement field, while the remaining 40k rows lack this field. Does the absence of problem_statement in these rows affect the training process of SWE-Agent? !Image\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "5463556c-c819-4178-b56c-7dc778a322f8", "embedding": null, "metadata": {"issue_id": 8, "title": "Challenges Encountered When Scaling to More Repositories", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7b64aaad-3b8d-41b3-b37c-e2f3f5e29565", "node_type": "4", "metadata": {"issue_id": 8, "title": "Challenges Encountered When Scaling to More Repositories", "state": "closed", "labels": [], "type": "issue"}, "hash": "a724bc971f41a0ef6776ad95904e3e364a02eaadca212d73cf694b49f0a510fe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Challenges Encountered When Scaling to More Repositories\n\nDescription: While using the SWE-bench data collection method to scale to more repositories, I encountered a major challenge: for different repos, the constants and log_parser configurations need to be manually set in order to define the installation commands for the testing environment image. This makes it difficult to automatically set up the environment and significantly slows down the expansion process. As a workaround, I opted to use a unified configuration across all repos and then filter out instances with environment setup failures after validation. Although this approach allows the process to run automatically, it leads to substantial loss\u2014only about 10\u201320% of the instances are able to successfully build the Docker image. I also looked at the constants in SWE-smith, and it seems that the environment image configuration still requires manual setup on a per-repo basis. In my opinion, this is essentially equivalent to manual annotation. How can we solve the problem of automating environment configuration?\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1106, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "2da8143e-40ad-49ae-8cd8-514b4a9cdd55", "embedding": null, "metadata": {"issue_id": 7, "title": "Question: Issue content generation", "state": "open", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ec5f6ca4-1e5b-44e6-97b7-74ccd72863e3", "node_type": "4", "metadata": {"issue_id": 7, "title": "Question: Issue content generation", "state": "open", "labels": [], "type": "issue"}, "hash": "781e7f4ac882cec06d2a0b0b38fb1b5cdde903fe894c72053ab6bcbbb23ca167", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Question: Issue content generation\n\nDescription: Thanks for the great effort! 1. If we want to generate problem statement for the rest of 40k examples, which config should we use? (ig_tests.yaml, ig_v1.yaml, ig_v2.yaml) 2. Which config is used to generate for the existing 10k examples? 3. What's the recommended model for this purpose? Is it better to use a thinking model or non-thinking model? thanks\n\nState: open", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 423, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "3ad2d605-b6d2-4678-832d-91e58f592807", "embedding": null, "metadata": {"issue_id": 4, "title": "Feat: Add basic testing", "state": "closed", "labels": [], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0dd167c9-a847-4224-be44-ad0293d7f809", "node_type": "4", "metadata": {"issue_id": 4, "title": "Feat: Add basic testing", "state": "closed", "labels": [], "type": "issue"}, "hash": "24d962426807a2627bf5813abfc6d6a9a618896412bfd30feef4e8e733d667d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Feat: Add basic testing\n\nDescription: Initialize a tests/ folder, similar to SWE-bench, and add some tests to it.\n\nState: closed", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 135, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "5b31ae82-7222-486e-92f7-d7b489f1e889", "embedding": null, "metadata": {"issue_id": 3, "title": "Doc: Add more information on how to contribute", "state": "open", "labels": ["documentation"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6d1641f5-1f51-4d89-a2fb-8b046686faf1", "node_type": "4", "metadata": {"issue_id": 3, "title": "Doc: Add more information on how to contribute", "state": "open", "labels": ["documentation"], "type": "issue"}, "hash": "5a8ec05af30fc3dc44e769b74ced4a2b3208400f5f179eebbe24f964df26837c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Doc: Add more information on how to contribute\n\nDescription: Fill out the CONTRIBUTING.md document with more information on how to contribute to SWE-smith. Some initial ideas: * Generate problem statements for 40k instances that don't have it. * Add repos + task instances to SWE-smith + dataset * New bug generation techniques * Train better models.\n\nState: open\n\nLabels: documentation\n\nCategories: category-documentation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 429, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "9ebd211c-3247-40b5-8ed6-9bc0aa8da6d1", "embedding": null, "metadata": {"issue_id": 1, "title": "Bug: `swesmith.build_repo.test_install` script does not run", "state": "closed", "labels": ["bug"], "type": "issue"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2833c42b-d6c2-49df-9764-b5835ccbdced", "node_type": "4", "metadata": {"issue_id": 1, "title": "Bug: `swesmith.build_repo.test_install` script does not run", "state": "closed", "labels": ["bug"], "type": "issue"}, "hash": "aa98e0168255c85ff105d0c7fdcd618b76860f589dd01e9ca6098afa3d97750e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Title: Bug: `swesmith.build_repo.test_install` script does not run\n\nDescription: Testing installation instructions for a repository will throw an error if not done within the source repository. [CODE_BLOCK] The logic for testing installations should be rewritten such that artifacts are not tied down to the source codebase.\n\nState: closed\n\nLabels: bug\n\nCategories: category-bug\n\nType: Bug report or error", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 405, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "a2b6d1f6-64aa-44c5-a663-e5c4a23ecc96", "embedding": null, "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ef4abad-f4d1-416d-b0d1-57c674c13f0f", "node_type": "4", "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "hash": "f1af46002e13040d2b0047a22dbde352ba83cfa63a71e844f9d7925b781fc61a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5035692f-855f-45f0-9210-69105004f420", "node_type": "1", "metadata": {}, "hash": "381b93f907208e24078a3a44f0340236958bff6a4dc3d0c8a9eb2b2c6f96e462", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #4 (PR #27):\nPatch summary for PR (max 8000 chars):\nFiles changed: test_utils_llm.py, pyproject.toml, pytest.yaml, test_classes.py, __init__.py, rewrite.py, utils.py\n--- Changes ---\n--- /dev/null\n\n--- .github/workflows/pytest.yaml ---\n@@ -0,0 +1,56 @@\n+name: Pytest\n+\n+env:\n+  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+\n+on:\n+  push:\n+    branches:\n+      - main\n+      - \"test-ci/**\"\n+    paths-ignore:\n+      - 'docs/**'\n+      - 'README.md'\n+      - 'mkdocs.yml'\n+  pull_request:\n+    branches:\n+      - main\n+    paths-ignore:\n+      - 'docs/**'\n+      - 'README.md'\n+      - 'mkdocs.yml'\n+\n+# Not possible to test windows capability:\n+# https://github.com/orgs/community/discussions/25491\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    defaults:\n+      run:\n+        shell: bash -l {0}\n+    steps:\n+      - name: Checkout code\n+        uses: actions/checkout@v2\n+      - uses: actions/setup-python@v5\n+        with:\n+          python-version: '3.10'\n+      - name: Install uv\n+        run: |\n+          curl -LsSf https://astral.sh/uv/install.sh | sh\n+      - name: Install dependencies\n+        run: |\n+            uv pip install --python ${Python_ROOT_DIR} '.'\n+      - name: Install dev dependencies\n+        run: |\n+            uv pip install --python ${Python_ROOT_DIR} pytest pytest-cov\n+      - name: Run pytest\n+        uses: sjvrijn/pytest-last-failed@v2\n+        with:\n+          pytest-args: '--exitfirst --cov'\n+      - name: Explicitly convert coverage to xml\n+        run: coverage xml\n+      - name: Upload coverage reports to Codecov\n+        uses: codecov/codecov-action@v4.0.1\n+        with:\n+          token: ${{ secrets.CODECOV_TOKEN }}\n+          slug: SWE-bench/SWE-smith\n\n--- pyproject.toml ---\n@@ -52,6 +52,16 @@ docs = [\n     \"mkdocstrings[python]>=0.18\",\n     \"mike\",\n ]\n+test = [\n+    \"pytest\",\n+    \"pytest-cov\",\n+]\n+\n+[tool.pytest.ini_options]\n+testpaths = [\"tests\"]\n+python_files = \"test_*.py\"\n+python_classes = \"Test*\"\n+python_functions = \"test_*\"\n [tool.setuptools]\n include-package-data = true\n\n--- swesmith/bug_gen/llm/rewrite.py ---\n@@ -13,7 +13,6 @@\n python -m swesmith.bug_gen.llm.rewrite tkrajina__gpxpy.09fc46b3 --model claude-3-7-sonnet-20250219 --type class\n \"\"\"\n-import ast\n import argparse\n import json\n import litellm\n\n--- swesmith/bug_gen/llm/rewrite.py ---\n@@ -31,6 +30,7 @@\n from swesmith.bug_gen.llm.utils import (\n     PROMPT_KEYS,\n     extract_code_block,\n+    get_function_signature,\n     strip_function_body,\n )\n from swesmith.bug_gen.utils import (\n\n--- swesmith/bug_gen/llm/rewrite.py ---\n@@ -55,13 +55,6 @@\n random.seed(24)\n-def get_function_signature(node):\n-    \"\"\"Generate the function signature as a string.\"\"\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2693, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "5035692f-855f-45f0-9210-69105004f420", "embedding": null, "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ef4abad-f4d1-416d-b0d1-57c674c13f0f", "node_type": "4", "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "hash": "f1af46002e13040d2b0047a22dbde352ba83cfa63a71e844f9d7925b781fc61a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a2b6d1f6-64aa-44c5-a663-e5c4a23ecc96", "node_type": "1", "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "hash": "176b353574bcb1d91e8c0c78abb336ed41b351d863919a654a71b00bc322a8cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6827d7b9-83c6-467b-8809-14cbfc36d020", "node_type": "1", "metadata": {}, "hash": "2c21dbb4b262d454b50506de4486d144dd0681109fa441b170f82e1417aec5f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-    args = [ast.unparse(arg) for arg in node.args.args]  # For Python 3.9+\n-    args_str = \", \".join(args)\n-    return f\"def {node.name}({args_str})\"\n-\n-\n def main(\n     repo: str,\n     config_file: str,\n\n--- swesmith/bug_gen/llm/utils.py ---\n@@ -12,6 +12,13 @@ def extract_code_block(text: str) -> str:\n     return match.group(1).strip() if match else \"\"\n+def get_function_signature(node):\n+    \"\"\"Generate the function signature as a string.\"\"\"\n+    args = [ast.unparse(arg) for arg in node.args.args]  # For Python 3.9+\n+    args_str = \", \".join(args)\n+    return f\"def {node.name}({args_str})\"\n+\n+\n def strip_function_body(source_code):\n     tree = ast.parse(source_code)\n--- /dev/null\n\n--- tests/bug_gen/llm/test_utils_llm.py ---\n@@ -0,0 +1,69 @@\n+import ast\n+from swesmith.bug_gen.llm.utils import extract_code_block, get_function_signature\n+\n+\n+def parse_func(code):\n+    return ast.parse(code).body[0]\n+\n+\n+def test_extract_code_block_basic():\n+    text = \"\"\"\n+    Here is some code:\n+    ```python\\nprint('hello')\\n```\n+    \"\"\"\n+    assert extract_code_block(text) == \"print('hello')\"\n+\n+\n+def test_extract_code_block_no_language():\n+    text = \"\"\"\n+    Example:\n+    ```\\nfoo = 1\\nbar = 2\\n```\n+    \"\"\"\n+    assert extract_code_block(text) == \"foo = 1\\nbar = 2\"\n+\n+\n+def test_extract_code_block_no_block():\n+    text = \"No code block here.\"\n+    assert extract_code_block(text) == \"\"\n+\n+\n+def test_extract_code_block_multiple_blocks():\n+    text = \"\"\"\n+    ```python\\nfirst = True\\n```\n+    Some text\n+    ```python\\nsecond = False\\n```\n+    \"\"\"\n+    # Should extract only the first block\n+    assert extract_code_block(text) == \"first = True\"\n+\n+\n+def test_extract_code_block_strip_whitespace():\n+    text = \"\"\"\n+    ```\\n   a = 1\\n   b = 2   \\n\\n```\n+    \"\"\"\n+    assert extract_code_block(text) == \"a = 1\\n   b = 2\"\n+\n+\n+def test_get_function_signature_simple():\n+    node = parse_func(\"def foo(a, b): pass\")\n+    assert get_function_signature(node) == \"def foo(a, b)\"\n+\n+\n+def test_get_function_signature_no_args():\n+    node = parse_func(\"def bar(): pass\")\n+    assert get_function_signature(node) == \"def bar()\"\n+\n+\n+def test_get_function_signature_with_defaults():\n+    node = parse_func(\"def baz(a, b=2): pass\")\n+    assert get_function_signature(node) == \"def baz(a, b)\"\n+\n+\n+def test_get_function_signature_varargs():\n+    node = parse_func(\"def qux(*args, **kwargs): pass\")\n+    assert get_function_signature(node) == \"def qux()\"\n+\n+\n+def test_get_function_signature_annotations():\n+    node = parse_func(\"def annotated(a: int, b: str) -> None: pass\")\n+    assert get_function_signature(node) == \"def annotated(a: int, b: str)\"\n--- /dev/null\n\n--- tests/bug_gen/procedural/test_classes.py ---\n@@ -0,0 +1,134 @@\n+import libcst\n+import pytest\n+from swesmith.bug_gen.procedural.classes import (\n+    ClassRemoveBasesModifier,\n+    ClassShuffleMethodsModifier,\n+    ClassRemoveFuncsModifier,\n+)\n+\n+\n+@pytest.mark.parametrize(\n+    \"src,expected_variants\",", "mimetype": "text/plain", "start_char_idx": 2694, "end_char_idx": 5666, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "6827d7b9-83c6-467b-8809-14cbfc36d020", "embedding": null, "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ef4abad-f4d1-416d-b0d1-57c674c13f0f", "node_type": "4", "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "hash": "f1af46002e13040d2b0047a22dbde352ba83cfa63a71e844f9d7925b781fc61a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5035692f-855f-45f0-9210-69105004f420", "node_type": "1", "metadata": {"issue_id": 4, "pr_number": 27, "type": "patch", "files": [".github/workflows/pytest.yaml", "pyproject.toml", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "tests/__init__.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/procedural/test_classes.py", "tests/bug_gen/procedural/test_control_flow.py", "tests/bug_gen/procedural/test_operations.py", "tests/bug_gen/procedural/test_remove.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/test_utils.py"]}, "hash": "3cb73f70324df25710f61c1e760b33f36801c647d6d5d2b7bdd46d11fadff309", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "b)\"\n+\n+\n+def test_get_function_signature_varargs():\n+    node = parse_func(\"def qux(*args, **kwargs): pass\")\n+    assert get_function_signature(node) == \"def qux()\"\n+\n+\n+def test_get_function_signature_annotations():\n+    node = parse_func(\"def annotated(a: int, b: str) -> None: pass\")\n+    assert get_function_signature(node) == \"def annotated(a: int, b: str)\"\n--- /dev/null\n\n--- tests/bug_gen/procedural/test_classes.py ---\n@@ -0,0 +1,134 @@\n+import libcst\n+import pytest\n+from swesmith.bug_gen.procedural.classes import (\n+    ClassRemoveBasesModifier,\n+    ClassShuffleMethodsModifier,\n+    ClassRemoveFuncsModifier,\n+)\n+\n+\n+@pytest.mark.parametrize(\n+    \"src,expected_variants\",\n+    [\n+        # Remove single base\n+        (\n+            \"\"\"\n+class Foo(Bar):\n+    pass\n+\"\"\",\n+            [\n+                \"class Foo():\\n    pass\",\n+            ],\n+        ),\n+        # Remove one of multiple bases\n+        (\n+            \"\"\"\n+class Foo(Bar, Baz):\n+    pass\n+\"\"\",\n+            [\n+                \"class Foo(Bar):\\n    pass\",\n+                \"class Foo(Baz):\\n    pass\",\n+                \"class Foo():\\n    pass\",\n+            ],\n+        ),\n+    ],\n+)\n+def test_class_remove_bases(src, expected_variants):\n+    module = libcst.parse_module(src)\n+    modifier = ClassRemoveBasesModifier(likelihood=1.0, seed=42)\n+    modified = module.visit(modifier)\n+    assert any(\n+        modified.code.strip() == variant.strip() for variant in expected_variants\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    \"src,expected_variants\",\n+    [\n+        # Shuffle two methods\n+        (\n+            \"\"\"class Foo:\n+    def a(self):\n+        pass\n+    def b(self):\n+        pass\n+\"\"\",\n+            [\n+                \"class Foo:\\n    def a(self):\\n        pass\\n    def b(self):\\n        pass\",\n+                \"class Foo:\\n    def b(self):\\n        pass\\n    def a(self):\\n        pass\",\n+            ],\n+        ),\n+        # No shuffle if only one method\n+        (\n+            \"\"\"class Bar:\n+    def a(self):\n+        pass\n+\"\"\",\n+            [\n+                \"class Bar:\\n    def a(self):\\n        pass\",\n+            ],\n+        ),\n+    ],\n+)\n+def test_class_shuffle_methods(src, expected_variants):\n+    module = libcst.parse_module(src)\n+    modifier = ClassShuffleMethodsModifier(likelihood=1.0, seed=42)\n+    modified = module.visit(modifier)\n+    assert any(\n+        modified.code.strip() == variant.strip() for variant in expected_variants\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    \"src,expected_variants\",\n+    [\n+        # Remove a method and its reference\n+        (\n+            \"\"\"class Foo:\n+    def a(self):\n+        pass\n+    def b(self):\n+        self.a()\n+        return 1\n+\"\"\",\n+            [\n+                # Only b remains, and self.a() is replaced with None\n+                \"class Foo:\\n    def b(self):\\n        None\\n        return 1\\n\",\n+                # Only a remains\n+                \"class Foo:\\n    def a(self):\\n        pass\\n\",\n+                # Both removed\n+            ... [diff truncated for embedding] ...", "mimetype": "text/plain", "start_char_idx": 4981, "end_char_idx": 8029, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "bfcc3743-c277-467b-b020-502a4d159e8d", "embedding": null, "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "608b8152-d10d-4ad0-96b4-d8256f9876e0", "node_type": "4", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "de2f0cf7f2d7b51ca8a3e30ecb9cb49f604f16c57eb5ba73e24b088902c38f80", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0d372f2-48ba-46cb-91ba-82d2c227ecae", "node_type": "1", "metadata": {}, "hash": "b2592fbcee040d98fc6b626c7274bae220d34759818d5f31e3da6bbb994be05c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #1 (PR #2):\nPatch summary for PR (max 8000 chars):\nFiles changed: env_construction.md, blog.html, CONTRIBUTING.md, README.md, .gitignore, paper.pdf, install_repo.sh\n--- Changes ---\n\n--- .gitignore ---\n@@ -1,6 +1,7 @@\n # Files\n .env\n .DS_Store\n+.api_key\n # Folders\n hidden/\n--- /dev/null\n\n--- CONTRIBUTING.md ---\n@@ -0,0 +1,3 @@\n+# Contributing\n+\n+Thanks for your interest in contributing to SWE-smith! There's several ways to contribute.\n\n--- README.md ---\n@@ -1,5 +1,5 @@\n <p align=\"center\">\n-  <a href=\"http://swe-bench.github.io\">\n+  <a href=\"https://swesmith.com/\">\n     <img src=\"docs/assets/banner.png\" style=\"height: 10em\" alt=\"Kawhi the SWE-smith\" />\n   </a>\n </p>\n\n--- README.md ---\n@@ -28,33 +28,51 @@ SWE-smith is a toolkit for training software engineering (SWE) agents. With SWE-\n * *Generate trajectories* of [SWE-agent](https://github.com/SWE-agent/SWE-agent) solving those task instances.\n * *Train local LMs* on these trajectories to improve their software engineering capabilities ([SWE-agent-LM-32B](https://huggingface.co/SWE-bench/SWE-agent-LM-32B)).\n-### \ud83d\ude80 Get Started\n-Check out the [documentation]() for a complete guide on how to use SWE-smith, including how to\n-* [Install]() the repository locally or as a PyPI package.\n-* [Create Task Instances]() for any Python repository with SWE-smith.\n-* Use your task instance to [train your own SWE-agents]()\n+## \ud83d\ude80 Get Started\n+Check out the [documentation](https://swesmith.com/getting_started/) for a complete guide on how to use SWE-smith, including how to\n+* [Install](https://swesmith.com/getting_started/installation/) the repository locally or as a PyPI package.\n+* [Create Task Instances](https://swesmith.com/guides/create_instances/) for any Python repository with SWE-smith.\n+* Use your task instance to [train your own SWE-agents](https://swesmith.com/guides/train_swe_agent/)\n-### \ud83d\udcbf Resources\n+## \ud83c\udfce\ufe0f Quick Start\n+Install the repo:\n+```bash\n+git clone https://github.com/SWE-bench/SWE-smith\n+cd SWE-smith\n+conda create -n smith python=3.10;\n+conda activate smith;\n+pip install -e .\n+```\n+\n+Then, check out `scripts/cheatsheet.sh` for scripts to (1) create execution environments, (2) create task instances, and (3) train SWE-agents.\n+\n+> [!TIP]\n+> SWE-smith requires Docker to create execution environments. SWE-smith was developed and tested on Ubuntu 22.04.4 LTS.\n+> We do *not* plan on supporting Windows or MacOS.\n+\n+## \ud83d\udcbf Resources\n In addition to this toolkit, we've also provided several artifacts on the [SWE-bench HuggingFace](https://huggingface.co/SWE-bench), including:\n * [50k Python Task Instances](https://huggingface.co/datasets/SWE-bench/SWE-smith), created using SWE-smith.\n-* [SWE-agent-LM-32B](https://huggingface.co/SWE-bench/SWE-agent-LM-32B), trained using SWE-smith. Achieves **40.2%** pass@1 on [SWE-bench Verified](https://huggingface.co/datasets/SWE-bench/SWE-bench_Verified)!\n+* [SWE-agent-LM-32B](https://huggingface.co/SWE-bench/SWE-agent-LM-32B), trained using SWE-smith. Achieves **41.6%** pass@1 on [SWE-bench Verified](https://huggingface.co/datasets/SWE-bench/SWE-bench_Verified)!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3110, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "b0d372f2-48ba-46cb-91ba-82d2c227ecae", "embedding": null, "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "608b8152-d10d-4ad0-96b4-d8256f9876e0", "node_type": "4", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "de2f0cf7f2d7b51ca8a3e30ecb9cb49f604f16c57eb5ba73e24b088902c38f80", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bfcc3743-c277-467b-b020-502a4d159e8d", "node_type": "1", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "42996e7f342b96a9c677fd0f4e8dfb9c55d3b130b4ae22d8a5a87998a9200648", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ad5803a-7da9-4412-83ed-47166f7f0ffe", "node_type": "1", "metadata": {}, "hash": "8bceb312eca457ce1619b8f56fba833774663a61a7b48ebd665121c5c381846e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "-* [SWE-agent-LM-32B](https://huggingface.co/SWE-bench/SWE-agent-LM-32B), trained using SWE-smith. Achieves **40.2%** pass@1 on [SWE-bench Verified](https://huggingface.co/datasets/SWE-bench/SWE-bench_Verified)!\n+* [SWE-agent-LM-32B](https://huggingface.co/SWE-bench/SWE-agent-LM-32B), trained using SWE-smith. Achieves **41.6%** pass@1 on [SWE-bench Verified](https://huggingface.co/datasets/SWE-bench/SWE-bench_Verified)!\n * [5k Trajectories](https://huggingface.co/datasets/SWE-bench/SWE-smith-trajectories) that SWE-agent-LM-32B was trained on.\n And there's more coming!\n-### \ud83d\udcab Contributions\n+## \ud83d\udcab Contributions\n Excited about SWE-smith? We're actively working on several follow ups, and love meaningful collaborations! What we're thinking about...\n * Make SWE-smith work for non-Python languages\n * New bug generation techniques\n-* Train SWE-agents with more \n+* Train SWE-agents with more trajectories and new methods\n+\n+Check out the [Contributing Guide](CONTRIBUTING.md) for more.\n Contact Person: [John Yang](https://john-b-yang.github.io/), [Kilian Lieret](https://github.com/klieret/)\n (Email: [johnby@stanford.edu](mailto:johnby@stanford.edu))\n-### \ud83e\udeaa License\n+## \ud83e\udeaa License\n MIT. Check `LICENSE` for more information.\n-### \u270d\ufe0f Citation\n+## \u270d\ufe0f Citation\n ```bibtex\n @misc{yang2025swesmith,\n\n--- README.md ---\n@@ -68,7 +86,7 @@ MIT. Check `LICENSE` for more information.\n }\n ```\n-### \ud83d\udcd5 Related Works\n+## \ud83d\udcd5 Related Works\n <div align=\"center\">\n   <a href=\"https://github.com/SWE-bench/SWE-bench\"><img src=\"docs/assets/swebench_logo_text_below.svg\" alt=\"SWE-bench\" height=\"120px\"></a>\n   &nbsp;&nbsp;\n--- /dev/null\n\n--- configs/install_repo.sh ---\n@@ -0,0 +1,4 @@\n+#!/bin/bash\n+\n+pip install -e .", "mimetype": "text/plain", "start_char_idx": 2687, "end_char_idx": 4387, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "1ad5803a-7da9-4412-83ed-47166f7f0ffe", "embedding": null, "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "608b8152-d10d-4ad0-96b4-d8256f9876e0", "node_type": "4", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "de2f0cf7f2d7b51ca8a3e30ecb9cb49f604f16c57eb5ba73e24b088902c38f80", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0d372f2-48ba-46cb-91ba-82d2c227ecae", "node_type": "1", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "b17d7c63c6a8270c8e0be6f01f705c085f29a06794245251f9c70d6de7b18b1b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8bea5a6-73cc-42b9-9f4e-e35abdfc3782", "node_type": "1", "metadata": {}, "hash": "e765085c242c57b0507550ce1237b65d975ebfd96aa08ef4c54f9ed0294307d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Check `LICENSE` for more information.\n-### \u270d\ufe0f Citation\n+## \u270d\ufe0f Citation\n ```bibtex\n @misc{yang2025swesmith,\n\n--- README.md ---\n@@ -68,7 +86,7 @@ MIT. Check `LICENSE` for more information.\n }\n ```\n-### \ud83d\udcd5 Related Works\n+## \ud83d\udcd5 Related Works\n <div align=\"center\">\n   <a href=\"https://github.com/SWE-bench/SWE-bench\"><img src=\"docs/assets/swebench_logo_text_below.svg\" alt=\"SWE-bench\" height=\"120px\"></a>\n   &nbsp;&nbsp;\n--- /dev/null\n\n--- configs/install_repo.sh ---\n@@ -0,0 +1,4 @@\n+#!/bin/bash\n+\n+pip install -e .\n+pip install pytest\n\n--- docs/blog.html ---\n@@ -12,9 +12,10 @@\n <body>\n   <nav>\n     <ul class=\"nav-bar\">\n-      <li><a href=\"#data\">Data</a></li>\n-      <li><a href=\"#paper\">Paper</a></li>\n-      <li><a href=\"#code\">Code</a></li>\n+      <li><a href=\"https://huggingface.co/SWE-bench\">Data</a></li>\n+      <li><a href=\"../assets/paper.pdf\">Paper</a></li>\n+      <li><a href=\"https://github.com/SWE-bench/SWE-smith\">Code</a></li>\n+      <li><a href=\"/getting_started\">Docs</a></li>\n     </ul>\n   </nav>\n\n--- docs/blog.html ---\n@@ -31,7 +32,7 @@ <h3 class=\"subtitle\">\n     <section class=\"blog\">\n       <p style=\"color:#777;letter-spacing: -0.05rem;\">\n-        <a href=\"index.html\" style=\"color:#777\">Home</a> &bull; April 16, 2025\n+        <a href=\"index.html\" style=\"color:#777\">Home</a> &bull; April 30, 2025\n       </p>\n       <p>by <a href=\"https://john-b-yang.github.io/\">John Yang</a></p>\n       <p style=\"margin-top:1.5rem;\">\n\n--- docs/blog.html ---\n@@ -281,16 +282,14 @@ <h3 class=\"fire-text\">The Key Idea</h3>\n       </p>\n       <h3 class=\"fire-text\">Deliverables & Great Expectations</h3>\n       <p>\n-        Using SWE-smith, we create 50k task instances representing 128 Python repositories (and counting...).\n-      </p>\n-      <p>\n+        Using SWE-smith, we create 50k task instances across 128 Python repositories (and counting...).\n         Both numbers are an order of magnitude greater than any existing dataset.\n       </p>\n       <p>\n         We train <a href=\"https://huggingface.co/Qwen/Qwen2.5-Coder-32B-Instruct\">Qwen 2.5 32B Coder Instruct</a>\n         on 5000 expert trajectories generated from running SWE-agent + Claude 3.7 Sonnet on a subset of SWE-smith.\n-        Our model, SWE-agent-LM-32B, achieves a 40% single run resolve rate on SWE-bench Verified,\n-        #1 for open source SWE-agents.\n+        Our model, <a href=\"https://huggingface.co/SWE-bench/SWE-agent-LM-32B\">SWE-agent-LM-32B</a>, achieves a 40% single run resolve rate on SWE-bench Verified,\n+        #1 for open source agentic coding models.", "mimetype": "text/plain", "start_char_idx": 3878, "end_char_idx": 6427, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "e8bea5a6-73cc-42b9-9f4e-e35abdfc3782", "embedding": null, "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "608b8152-d10d-4ad0-96b4-d8256f9876e0", "node_type": "4", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "de2f0cf7f2d7b51ca8a3e30ecb9cb49f604f16c57eb5ba73e24b088902c38f80", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ad5803a-7da9-4412-83ed-47166f7f0ffe", "node_type": "1", "metadata": {"issue_id": 1, "pr_number": 2, "type": "patch", "files": [".gitignore", "CONTRIBUTING.md", "README.md", "configs/install_repo.sh", "docs/assets/paper.pdf", "docs/blog.html", "docs/guides/env_construction.md", "docs/index.html", "docs/overrides/main.html", "pyproject.toml"]}, "hash": "bbaf4b15efc1595761d05bef4f4101835ae47f0ca645248c24cc15fea780314b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "</p>\n       <p>\n         We train <a href=\"https://huggingface.co/Qwen/Qwen2.5-Coder-32B-Instruct\">Qwen 2.5 32B Coder Instruct</a>\n         on 5000 expert trajectories generated from running SWE-agent + Claude 3.7 Sonnet on a subset of SWE-smith.\n-        Our model, SWE-agent-LM-32B, achieves a 40% single run resolve rate on SWE-bench Verified,\n-        #1 for open source SWE-agents.\n+        Our model, <a href=\"https://huggingface.co/SWE-bench/SWE-agent-LM-32B\">SWE-agent-LM-32B</a>, achieves a 40% single run resolve rate on SWE-bench Verified,\n+        #1 for open source agentic coding models.\n       </p>\n     </section>\n   </main>\n\n--- docs/blog.html ---\n@@ -316,5 +315,14 @@ <h3 class=\"fire-text\">Deliverables & Great Expectations</h3>\n     // Optional: autoplay\n     // setInterval(nextSlide, 5000);\n   </script>\n+  <!-- Google tag (gtag.js) -->\n+  <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-46KMJE3755\"></script>\n+  <script>\n+    window.dataLayer = window.dataLayer || [];\n+    function gtag(){dataLayer.push(arguments);}\n+    gtag('js', new Date());\n+\n+    gtag('config', 'G-46KMJE3755');\n+  </script>\n </body>\n </html>\n\n--- docs/guides/env_construction.md ---\n@@ -1 +1,50 @@\n-Coming soon!\n+SWE-smith enables automatic construction of execution environments for repositories.\n+We'll review the two steps of this process:\n+\n+1. SWE-agent + LM attempts to install a repository + run the testing suite.\n+2. Construct an execution environment (Docker image).\n+\n+For this section, we'll use the [Instagram/MonkeyType](https://github.com/Instagram/MonkeyType/) repository as a running example, \n+specifically at commit [`70c3acf`](https://github.com/Instagram/MonkeyType/tree/70c3acf62950be5dfb28743c7a719bfdecebcd84).\n+\n+## Automatically Install Repos with SWE-agent\n+\n+Coming soon!\n+\n+## Create an Execution Environment\n+First, create the conda environment for the target repository.\n+```bash\n+python -m swesmith.build_repo.try_install Instagram/MonkeyType install_repo.sh \\\n+    --commit 70c3acf62950be5dfb28743c7a719bfdecebcd84\n+```\n+where `install_repo.sh` is the script that installs the repository.\n+([Example](https://github.c... [diff truncated for embedding] ...", "mimetype": "text/plain", "start_char_idx": 5826, "end_char_idx": 8028, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "20bb1877-be6f-431e-b466-13bb48a9b883", "embedding": null, "metadata": {"issue_id": null, "pr_number": 44, "type": "patch", "files": ["pyproject.toml", "swesmith/bug_gen/adapters/golang.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6264d108-9023-4541-b219-06d5a11c18e3", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 44, "type": "patch", "files": ["pyproject.toml", "swesmith/bug_gen/adapters/golang.py"]}, "hash": "e1660b0f06c3942e69d9eb8391fa5856661dcf3b559b87f433826c68b615c503", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #44):\nPatch summary for PR (max 8000 chars):\nFiles changed: golang.py, pyproject.toml\n--- Changes ---\n\n--- pyproject.toml ---\n@@ -39,8 +39,8 @@ dependencies = [\n     \"swebench\",\n     \"tiktoken\",\n     \"tqdm\",\n-    \"tree-sitter==0.21.3\",\n-    \"tree-sitter-languages\",\n+    \"tree-sitter\",\n+    \"tree-sitter-go\",\n     \"unidiff\",\n     \"textual\",\n ]\n\n--- swesmith/bug_gen/adapters/golang.py ---\n@@ -2,10 +2,10 @@\n from swesmith.constants import TODO_REWRITE\n from swesmith.utils import CodeEntity\n-from tree_sitter import Parser\n-from tree_sitter_languages import get_language\n+from tree_sitter import Language, Parser\n+import tree_sitter_go as tsgo\n-GO_LANGUAGE = get_language(\"go\")\n+GO_LANGUAGE = Language(tsgo.language())\n class GoEntity(CodeEntity):\n\n--- swesmith/bug_gen/adapters/golang.py ---\n@@ -61,8 +61,7 @@ def get_entities_from_file_go(\n     Parse a .go file and return up to max_entities top-level funcs and types.\n     If max_entities < 0, collects them all.\n     \"\"\"\n-    parser = Parser()\n-    parser.set_language(GO_LANGUAGE)\n+    parser = Parser(GO_LANGUAGE)\n     file_content = open(file_path, \"r\", encoding=\"utf8\").read()\n     tree = parser.parse(bytes(file_content, \"utf8\"))", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1214, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "bc9307f3-496e-4bbb-a9e1-eadc4f6f193b", "embedding": null, "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "875208d7-ff04-4cff-903c-e93001bb2fa1", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "hash": "912414f11b5b71467b63f43669a17298174206abad0e6a708d000445d034fd9a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "990c5fc0-d0ba-420e-a579-69a6a7f395ef", "node_type": "1", "metadata": {}, "hash": "75234ff59927bf7425199faf39e71f49f2a5b0e68b1394b6933a9cda4ff922cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #46):\nPatch summary for PR (max 8000 chars):\nFiles changed: python.py, criteria.py\n--- Changes ---\n\n--- swesmith/bug_gen/adapters/python.py ---\n@@ -3,11 +3,102 @@\n from dataclasses import dataclass\n from swesmith.constants import TODO_REWRITE\n-from swesmith.utils import CodeEntity\n+from swesmith.utils import CodeEntity, CodeProperty\n @dataclass\n class PythonEntity(CodeEntity):\n+    def _analyze_properties(self):\n+        node = self.node\n+\n+        # Core entity types\n+        if isinstance(node, ast.FunctionDef):\n+            self._tags.add(CodeProperty.IS_FUNCTION)\n+        elif isinstance(node, ast.ClassDef):\n+            self._tags.add(CodeProperty.IS_CLASS)\n+\n+        # Control flow\n+        if any(isinstance(n, (ast.For, ast.While)) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_LOOP)\n+        if any(isinstance(n, ast.If) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_IF)\n+            if any(n.orelse for n in ast.walk(node) if isinstance(n, ast.If)):\n+                self._tags.add(CodeProperty.HAS_IF_ELSE)\n+        if any(isinstance(n, ast.Try) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_EXCEPTION)\n+\n+        # Operations\n+        if any(isinstance(n, ast.Subscript) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_LIST_INDEXING)\n+        if any(isinstance(n, ast.Call) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_FUNCTION_CALL)\n+        if any(isinstance(n, ast.Return) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_RETURN)\n+        if any(isinstance(n, ast.ListComp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_LIST_COMPREHENSION)\n+        if any(isinstance(n, (ast.Import, ast.ImportFrom)) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_IMPORT)\n+        if any(isinstance(n, ast.Assign) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_ASSIGNMENT)\n+        if any(isinstance(n, ast.Lambda) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_LAMBDA)\n+        if any(isinstance(n, (ast.BinOp, ast.UnaryOp)) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_ARITHMETIC)\n+        if any(\n+            isinstance(n, ast.FunctionDef) and n.decorator_list for n in ast.walk(node)\n+        ):\n+            self._tags.add(CodeProperty.HAS_DECORATOR)\n+        if any(isinstance(n, (ast.Try, ast.With)) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_WRAPPER)\n+        if any(isinstance(n, ast.ClassDef) and n.bases for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_PARENT)\n+\n+        # Operations by type\n+        if any(isinstance(n, ast.BinOp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_BINARY_OP)\n+        if any(isinstance(n, ast.BoolOp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_BOOL_OP)\n+        if any(isinstance(n, ast.UnaryOp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_UNARY_OP)\n+\n+        # Special cases\n+        if any(\n+            isinstance(n, ast.Compare)\n+            and len(n.ops) == 1\n+            and n.ops[0].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3269, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "990c5fc0-d0ba-420e-a579-69a6a7f395ef", "embedding": null, "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "875208d7-ff04-4cff-903c-e93001bb2fa1", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "hash": "912414f11b5b71467b63f43669a17298174206abad0e6a708d000445d034fd9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc9307f3-496e-4bbb-a9e1-eadc4f6f193b", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "hash": "518ed3d8d414ecb33dade129dd49ed345d5de6c852d8b4d45a6a604242b2ff3b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb2078f8-0678-4b3b-bb2b-b94364eac11f", "node_type": "1", "metadata": {}, "hash": "69b1f620db255be761b8395a7d657ddf66e198a1735a6f031b886fbe776f7533", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "_tags.add(CodeProperty.HAS_WRAPPER)\n+        if any(isinstance(n, ast.ClassDef) and n.bases for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_PARENT)\n+\n+        # Operations by type\n+        if any(isinstance(n, ast.BinOp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_BINARY_OP)\n+        if any(isinstance(n, ast.BoolOp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_BOOL_OP)\n+        if any(isinstance(n, ast.UnaryOp) for n in ast.walk(node)):\n+            self._tags.add(CodeProperty.HAS_UNARY_OP)\n+\n+        # Special cases\n+        if any(\n+            isinstance(n, ast.Compare)\n+            and len(n.ops) == 1\n+            and n.ops[0].__class__.__name__ in [\"Lt\", \"Gt\", \"LtE\", \"GtE\"]\n+            for n in ast.walk(node)\n+        ):\n+            self._tags.add(CodeProperty.HAS_OFF_BY_ONE)\n+\n+    @property\n+    def complexity(self) -> int:\n+        \"\"\"\n+        Simple way of calculating the complexity of a function.\n+        Complexity starts at 1 and increases for each decision point:\n+        - if/elif/else statements\n+        - for/while loops\n+        - and/or operators\n+        - except clauses\n+        - boolean operators\n+        \"\"\"\n+        complexity = 1  # Base complexity\n+\n+        for n in ast.walk(self.node):\n+            # Decision points\n+            if isinstance(n, (ast.If, ast.While, ast.For)):\n+                complexity += 1\n+            # Boolean operators\n+            elif isinstance(n, ast.BoolOp):\n+                complexity += len(n.values) - 1\n+            # Exception handling\n+            elif isinstance(n, ast.Try):\n+                complexity += len(n.handlers)\n+            # Comparison operators\n+            elif isinstance(n, ast.Compare):\n+                complexity += len(n.ops)\n+\n+        return complexity\n+\n     @property\n     def name(self):\n         return self.node.name\n+++ /dev/null\n\n--- swesmith/bug_gen/adapters/python.py ---\n@@ -1,242 +0,0 @@\n-import ast\n-\n-from swesmith.utils import CodeEntity\n-\n-\n-def filter_all(code_entity: CodeEntity) -> bool:\n-    return True\n-\n-\n-def filter_functions(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Check whether node is a function definition\n-    \"\"\"\n-    return isinstance(code_entity.node, ast.FunctionDef)\n-\n-\n-def filter_classes(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Check whether node is a class definition\n-    \"\"\"\n-    return isinstance(code_entity.node, ast.ClassDef)\n-\n-\n-def filter_classes_has_parents(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Check whether node is a class definition with parents\n-    \"\"\"\n-    return isinstance(code_entity.node, ast.ClassDef) and code_entity.node.bases\n-\n-\n-def filter_classes_has_decorators(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Check whether node is a class definition with decorators\n-    \"\"\"\n-    return (\n-        isinstance(code_entity.node, ast.ClassDef) and code_entity.node.decorator_list\n-    )\n-\n-\n-def filter_loops(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have loops in them\n-    \"\"\"\n-    node = code_entity.node\n-    return any(\n-        isinstance(n, ast.For) or isinstance(n, ast.While) for n in ast.walk(node)\n-    )\n-\n-\n-def filter_list_indexing(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have list indexing in them\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.", "mimetype": "text/plain", "start_char_idx": 2554, "end_char_idx": 5977, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "cb2078f8-0678-4b3b-bb2b-b94364eac11f", "embedding": null, "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "875208d7-ff04-4cff-903c-e93001bb2fa1", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "hash": "912414f11b5b71467b63f43669a17298174206abad0e6a708d000445d034fd9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "990c5fc0-d0ba-420e-a579-69a6a7f395ef", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 46, "type": "patch", "files": ["swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/procedural/__init__.py", "swesmith/bug_gen/procedural/classes.py", "swesmith/bug_gen/procedural/control_flow.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/procedural/remove.py", "swesmith/utils.py"]}, "hash": "8791d9da5513449b555b666adefc21479876adb52e93bd8afe3f90cd286268c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ClassDef) and code_entity.node.bases\n-\n-\n-def filter_classes_has_decorators(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Check whether node is a class definition with decorators\n-    \"\"\"\n-    return (\n-        isinstance(code_entity.node, ast.ClassDef) and code_entity.node.decorator_list\n-    )\n-\n-\n-def filter_loops(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have loops in them\n-    \"\"\"\n-    node = code_entity.node\n-    return any(\n-        isinstance(n, ast.For) or isinstance(n, ast.While) for n in ast.walk(node)\n-    )\n-\n-\n-def filter_list_indexing(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have list indexing in them\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.Subscript) for n in ast.walk(node))\n-\n-\n-def filter_conditionals(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have conditionals in them\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.If) for n in ast.walk(node))\n-\n-\n-def filter_function_calls(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have function calls in them\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.Call) for n in ast.walk(node))\n-\n-\n-def filter_return_statements(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that have return statements\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.Return) for n in ast.walk(node))\n-\n-\n-def filter_exceptions(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that handle exceptions (try/except blocks)\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.Try) for n in ast.walk(node))\n-\n-\n-def filter_list_comprehensions(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that use list comprehensions\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.ListComp) for n in ast.walk(node))\n-\n-\n-def filter_imports(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that contain import statements\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, (ast.Import, ast.ImportFrom)) for n in ast.walk(node))\n-\n-\n-def filter_assignments(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that contain assignment statements\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.Assign) for n in ast.walk(node))\n-\n-\n-def filter_class_definitions(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identify functions that contain class definitions\n-    \"\"\"\n-    node = code_entity.node\n-    return any(isinstance(n, ast.ClassDef) for n in ast.walk(node))\n-\n-\n-def filter_lambda_functions(code_entity: CodeEntity) -> bool:\n-    \"\"\"\n-    Identif... [diff truncated for embedding] ...", "mimetype": "text/plain", "start_char_idx": 5218, "end_char_idx": 8032, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "68ee235d-18e7-4248-9c4a-4ee0b0023208", "embedding": null, "metadata": {"issue_id": null, "pr_number": 35, "type": "patch", "files": ["swesmith/bug_gen/__init__.py", "swesmith/bug_gen/combine/__init__.py", "swesmith/bug_gen/llm/__init__.py", "swesmith/bug_gen/mirror/__init__.py", "swesmith/issue_gen/__init__.py", "swesmith/train/__init__.py", "swesmith/train/difficulty_rater/__init__.py", "swesmith/train/run/__init__.py", "swesmith/train/traj_mgr/__init__.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f0f49e2a-31d5-4c69-99f2-17afd1d69d07", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 35, "type": "patch", "files": ["swesmith/bug_gen/__init__.py", "swesmith/bug_gen/combine/__init__.py", "swesmith/bug_gen/llm/__init__.py", "swesmith/bug_gen/mirror/__init__.py", "swesmith/issue_gen/__init__.py", "swesmith/train/__init__.py", "swesmith/train/difficulty_rater/__init__.py", "swesmith/train/run/__init__.py", "swesmith/train/traj_mgr/__init__.py"]}, "hash": "6524cb0beebadb122eb149e3ced630daa84ea0f23cb44bf8fe9ed02f7c8ad51f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #35):\nPatch summary for PR (max 8000 chars):\nFiles changed: __init__.py\n--- Changes ---\nNo changes detected", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 133, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "f76ee06f-140c-45a7-90f1-0cdb43347c48", "embedding": null, "metadata": {"issue_id": null, "pr_number": 36, "type": "patch", "files": ["swesmith/constants.py", "swesmith/harness/log_parsers.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "006ad1c4-9d8a-4128-bf2d-be98f97bf6e1", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 36, "type": "patch", "files": ["swesmith/constants.py", "swesmith/harness/log_parsers.py"]}, "hash": "01fd52141f6aa98c9d3f2349c2b68a57e871ded954d1a5293c995ac62b3b8edd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #36):\nPatch summary for PR (max 8000 chars):\nFiles changed: constants.py, log_parsers.py\n--- Changes ---\n\n--- swesmith/constants.py ---\n@@ -457,7 +457,7 @@\n     \"a09c1f08461cec3d2131fde3939ef38c3c4ad5fc\": {\n         \"python\": \"3.12\",\n         \"install\": [\n-            \"sed -i '/^git+https:\\/\\/github.com\\/Project-MONAI\\//d' requirements-dev.txt\",\n+            r\"sed -i '/^git+https:\\/\\/github.com\\/Project-MONAI\\//d' requirements-dev.txt\",\n             \"python -m pip install -U -r requirements-dev.txt\",\n             \"python -m pip install -e .\",\n         ],\n\n--- swesmith/harness/log_parsers.py ---\n@@ -15,7 +15,7 @@ def parse_log_pytest(log: str) -> dict[str, str]:\n     test_status_map = {}\n     for line in log.split(\"\\n\"):\n         for status in TestStatus:\n-            is_match = re.match(f\"^(\\S+)(\\s+){status.value}\", line)\n+            is_match = re.match(rf\"^(\\S+)(\\s+){status.value}\", line)\n             if is_match:\n                 test_status_map[is_match.group(1)] = status.value\n                 continue\n\n--- swesmith/harness/log_parsers.py ---\n@@ -40,7 +40,7 @@ def parse_log_mypy(log: str) -> dict[str, str]:\n def parse_log_python_slugify(log: str) -> dict[str, str]:\n     \"\"\"Parser for test logs generated by un33k/python-slugify\"\"\"\n     test_status_map = {}\n-    pattern = \"^([a-zA-Z0-9_\\-,\\.\\s\\(\\)']+)\\s\\.{3}\\s\"\n+    pattern = r\"^([a-zA-Z0-9_\\-,\\.\\s\\(\\)']+)\\s\\.{3}\\s\"\n     for line in log.split(\"\\n\"):\n         is_match = re.match(f\"{pattern}ok$\", line)\n         if is_match:\n\n--- swesmith/harness/log_parsers.py ---\n@@ -78,7 +78,7 @@ def parse_log_paramiko(log: str) -> dict[str, str]:\n     test_status_map = {}\n     for line in log.split(\"\\n\"):\n         for status in TestStatus:\n-            is_match = re.match(f\"^{status.value}\\s(\\S+)\", line)\n+            is_match = re.match(rf\"^{status.value}\\s(\\S+)\", line)\n             if is_match:\n                 test_status_map[is_match.group(1)] = status.value\n                 continue\n\n--- swesmith/harness/log_parsers.py ---\n@@ -90,7 +90,7 @@ def parse_log_autograd(log: str) -> dict[str, str]:\n     test_status_map = {}\n     for line in log.split(\"\\n\"):\n         for status in TestStatus:\n-            is_match = re.match(f\"^\\[gw\\d\\]\\s{status.value}\\s(\\S+)\", line)\n+            is_match = re.match(rf\"^\\[gw\\d\\]\\s{status.value}\\s(\\S+)\", line)\n             if is_match:\n                 test_status_map[is_match.group(1)] = status.value\n                 continue", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2461, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "642a3ad2-6912-40f9-b4ef-c8a8d5cc833a", "embedding": null, "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "310eb37a-1bf5-476b-b431-f77372a45e02", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "61e793113c6924523b51713d16c3ad8fd5b2471e601eaff632b45baf6d6b5105", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13d6f11a-f859-4e45-9aa0-7b0b40e77778", "node_type": "1", "metadata": {}, "hash": "3c802e6dfe5a5aeb760f751f30f72712b79ddaeb3a5da8c90142f8c4f7c69438", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #28):\nPatch summary for PR (max 8000 chars):\nFiles changed: build-docs.yaml, lm_modify.yml, golang.py, pyproject.toml, create_instances.md, cheatsheet.sh, README.md, __init__.py, python.py\n--- Changes ---\n\n--- .github/workflows/build-docs.yaml ---\n@@ -23,7 +23,7 @@ jobs:\n           git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n       - uses: actions/setup-python@v5\n         with:\n-          python-version: 3.x\n+          python-version: 3.12\n       - run: echo \"cache_id=$(date --utc '+%V')\" >> $GITHUB_ENV\n       - uses: actions/cache@v4\n         with:\n\n--- configs/bug_gen/README.md ---\n@@ -45,7 +45,6 @@ Once you create the `.yaml` with a specified criteria, from this repo, run:\n python -m swesmith.bug_gen.llm.modify \\\n     --repo datamade/usaddress \\\n     --model openai/gpt-4o \\\n-    --entity_type func \\\n     --prompt_config configs/bug_gen/func_<your config>.yml \\\n     --n_workers 4  # 4 parallel queries to LM etc.\n ```\n\n--- configs/bug_gen/lm_modify.yml ---\n@@ -1,6 +1,5 @@\n version: 2\n name: lm_modify\n-criteria: simple_complexity10\n parameters:\n   bug_examples:\n     - \"Alter calculation order for incorrect results: Rearrange the sequence of operations in a calculation to subtly change the output (e.g., change (a + b) * c to a + (b * c)).\"\n\n--- docs/guides/create_instances.md ---\n@@ -48,7 +48,6 @@ To prompt an LM to modify a function to introduce a bug:\n python -m swesmith.bug_gen.llm.modify $repo \\\n   --n_bugs 1 \\\n   --model openai/gpt-4o \\\n-  --entity_type func \\\n   --prompt_config configs/bug_gen/lm_modify.yml\n ```\n\n--- pyproject.toml ---\n@@ -39,6 +39,8 @@ dependencies = [\n     \"swebench\",\n     \"tiktoken\",\n     \"tqdm\",\n+    \"tree-sitter==0.21.3\",\n+    \"tree-sitter-languages\",\n     \"unidiff\",\n     \"textual\",\n ]\n\n--- scripts/cheatsheet.sh ---\n@@ -32,7 +32,6 @@ repo=\"Instagram__MonkeyType.70c3acf6\"\n # LM Rewrite\n python -m swesmith.bug_gen.llm.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1933, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "13d6f11a-f859-4e45-9aa0-7b0b40e77778", "embedding": null, "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "310eb37a-1bf5-476b-b431-f77372a45e02", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "61e793113c6924523b51713d16c3ad8fd5b2471e601eaff632b45baf6d6b5105", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "642a3ad2-6912-40f9-b4ef-c8a8d5cc833a", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "3cdb9eb2b6ee96cfd2c18c72ced652c756bb241a40c3e8e973c13a02a6b7df4d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f3b8d87-329d-4cfb-856f-3142d893a2ed", "node_type": "1", "metadata": {}, "hash": "877bc3a5182f5aefa29e1881218a2511c27186f6e6463b7afc613e17293e083a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "bug_gen.llm.modify $repo \\\n   --n_bugs 1 \\\n   --model openai/gpt-4o \\\n-  --entity_type func \\\n   --prompt_config configs/bug_gen/lm_modify.yml\n ```\n\n--- pyproject.toml ---\n@@ -39,6 +39,8 @@ dependencies = [\n     \"swebench\",\n     \"tiktoken\",\n     \"tqdm\",\n+    \"tree-sitter==0.21.3\",\n+    \"tree-sitter-languages\",\n     \"unidiff\",\n     \"textual\",\n ]\n\n--- scripts/cheatsheet.sh ---\n@@ -32,7 +32,6 @@ repo=\"Instagram__MonkeyType.70c3acf6\"\n # LM Rewrite\n python -m swesmith.bug_gen.llm.rewrite $repo \\\n     --model anthropic/claude-3-7-sonnet-20250219 \\\n-    --type func \\\n     --config_file configs/bug_gen/lm_rewrite.yml \\\n     --n_workers 1\n\n--- scripts/cheatsheet.sh ---\n@@ -40,13 +39,10 @@ python -m swesmith.bug_gen.llm.rewrite $repo \\\n python -m swesmith.bug_gen.llm.modify $repo \\\n     --n_bugs 1 \\\n     --model openai/gpt-4o \\\n-    --entity_type func \\\n     --prompt_config configs/bug_gen/lm_modify.yml\n # Procedural Modifications\n-python -m swesmith.bug_gen.procedural.generate $repo \\\n-    --type func \\\n-    --max_bugs 10\n+python -m swesmith.bug_gen.procedural.generate $repo --max_bugs 10\n # Combine (Same File) - Must have validated task instances to run this script\n python -m swesmith.bug_gen.combine.same_file logs/bug_gen/$repo \\\n--- /dev/null\n\n--- swesmith/bug_gen/adapters/__init__.py ---\n@@ -0,0 +1,11 @@\n+from swesmith.bug_gen.adapters.golang import (\n+    get_entities_from_file_go,\n+)\n+from swesmith.bug_gen.adapters.python import (\n+    get_entities_from_file_py,\n+)\n+\n+get_entities_from_file = {\n+    \"go\": get_entities_from_file_go,\n+    \"py\": get_entities_from_file_py,\n+}\n--- /dev/null\n\n--- swesmith/bug_gen/adapters/golang.py ---\n@@ -0,0 +1,126 @@\n+import re\n+\n+from swesmith.constants import TODO_REWRITE\n+from swesmith.", "mimetype": "text/plain", "start_char_idx": 1453, "end_char_idx": 3199, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "8f3b8d87-329d-4cfb-856f-3142d893a2ed", "embedding": null, "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "310eb37a-1bf5-476b-b431-f77372a45e02", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "61e793113c6924523b51713d16c3ad8fd5b2471e601eaff632b45baf6d6b5105", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13d6f11a-f859-4e45-9aa0-7b0b40e77778", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "35d4e21055e20fdf4f988bef35ed0c4c124f2ab6d0a57222bc0bae6ae275237e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f668f2b2-f782-462e-852a-12aebe48f42f", "node_type": "1", "metadata": {}, "hash": "12b7431b2e7cf72c9a864406c8b4030707cfa8e029ee6b49bff797090be73e7e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "bug_gen.combine.same_file logs/bug_gen/$repo \\\n--- /dev/null\n\n--- swesmith/bug_gen/adapters/__init__.py ---\n@@ -0,0 +1,11 @@\n+from swesmith.bug_gen.adapters.golang import (\n+    get_entities_from_file_go,\n+)\n+from swesmith.bug_gen.adapters.python import (\n+    get_entities_from_file_py,\n+)\n+\n+get_entities_from_file = {\n+    \"go\": get_entities_from_file_go,\n+    \"py\": get_entities_from_file_py,\n+}\n--- /dev/null\n\n--- swesmith/bug_gen/adapters/golang.py ---\n@@ -0,0 +1,126 @@\n+import re\n+\n+from swesmith.constants import TODO_REWRITE\n+from swesmith.utils import CodeEntity\n+from tree_sitter import Parser\n+from tree_sitter_languages import get_language\n+\n+GO_LANGUAGE = get_language(\"go\")\n+\n+\n+class GoEntity(CodeEntity):\n+    @property\n+    def name(self) -> str:\n+        if self.node.type == \"function_declaration\":\n+            for child in self.node.children:\n+                if child.type == \"identifier\":\n+                    return child.text.decode(\"utf-8\")\n+        elif self.node.type == \"method_declaration\":\n+            func_name, receiver_type = None, None\n+            for child in self.node.children:\n+                if child.type == \"field_identifier\":\n+                    func_name = child.text.decode(\"utf-8\")\n+                elif child.type == \"parameter_list\":\n+                    # Assume first parameter is the receiver\n+                    receiver = [\n+                        c for c in self.node.children if c.type == \"parameter_list\"\n+                    ]\n+                    receiver = [\n+                        c\n+                        for c in receiver[0].children\n+                        if c.type == \"parameter_declaration\"\n+                    ][0]\n+                    type_node = [c for c in receiver.named_children if \"type\" in c.type]\n+                    receiver_type = type_node[0].text.decode(\"utf-8\").lstrip(\"*\")\n+            return f\"{receiver_type}.", "mimetype": "text/plain", "start_char_idx": 2649, "end_char_idx": 4556, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "f668f2b2-f782-462e-852a-12aebe48f42f", "embedding": null, "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "310eb37a-1bf5-476b-b431-f77372a45e02", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "61e793113c6924523b51713d16c3ad8fd5b2471e601eaff632b45baf6d6b5105", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f3b8d87-329d-4cfb-856f-3142d893a2ed", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "2eedb087cbf465cf44edfeba9acae441350aadeedb8def7031b29dd498572654", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c47d6b39-3f73-41e4-afc1-82272d10a3eb", "node_type": "1", "metadata": {}, "hash": "b094faa48921ffb668bd32ca4f7a8f1b69ebd1dbaaadd86a023c895cb3b0bf7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "node.type == \"method_declaration\":\n+            func_name, receiver_type = None, None\n+            for child in self.node.children:\n+                if child.type == \"field_identifier\":\n+                    func_name = child.text.decode(\"utf-8\")\n+                elif child.type == \"parameter_list\":\n+                    # Assume first parameter is the receiver\n+                    receiver = [\n+                        c for c in self.node.children if c.type == \"parameter_list\"\n+                    ]\n+                    receiver = [\n+                        c\n+                        for c in receiver[0].children\n+                        if c.type == \"parameter_declaration\"\n+                    ][0]\n+                    type_node = [c for c in receiver.named_children if \"type\" in c.type]\n+                    receiver_type = type_node[0].text.decode(\"utf-8\").lstrip(\"*\")\n+            return f\"{receiver_type}.{func_name}\" if receiver_type else func_name\n+\n+    @property\n+    def signature(self) -> str:\n+        return self.src_code.split(\"{\", 1)[0].strip()\n+\n+    @property\n+    def stub(self) -> str:\n+        # Find the opening brace '{' and remove everything after it\n+        match = re.search(r\"\\{\", self.src_code)\n+        if match:\n+            body_start = match.start()\n+            return (\n+                self.src_code[:body_start].rstrip() + \" {\\n\\t// \" + TODO_REWRITE + \"\\n}\"\n+            )\n+        else:\n+            # If no body found, return the original code\n+            return self.src_code\n+\n+\n+def get_entities_from_file_go(\n+    entities: list[GoEntity],\n+    file_path: str,\n+    max_entities: int = -1,\n+) -> list[GoEntity]:\n+    \"\"\"\n+    Parse a .go file and return up to max_entities top-level funcs and types.\n+    If max_entities < 0, collects them all.", "mimetype": "text/plain", "start_char_idx": 3637, "end_char_idx": 5433, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "c47d6b39-3f73-41e4-afc1-82272d10a3eb", "embedding": null, "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "310eb37a-1bf5-476b-b431-f77372a45e02", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "61e793113c6924523b51713d16c3ad8fd5b2471e601eaff632b45baf6d6b5105", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f668f2b2-f782-462e-852a-12aebe48f42f", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "b1a6166c4170d2db5b61581785f7dd56b3d8467f13578f9b0e58a9ac9f216ae5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3dde735e-011e-407f-a8d1-3b96af634e02", "node_type": "1", "metadata": {}, "hash": "c4df44e4f9b35340718dd32f236d321907e8a44c87d203781e589818bb9930a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "+    If max_entities < 0, collects them all.\n+    \"\"\"\n+    parser = Parser()\n+    parser.set_language(GO_LANGUAGE)\n+\n+    file_content = open(file_path, \"r\", encoding=\"utf8\").read()\n+    tree = parser.parse(bytes(file_content, \"utf8\"))\n+    root = tree.root_node\n+    lines = file_content.splitlines()\n+\n+    def walk(node):\n+        # stop if we've hit the limit\n+        if 0 <= max_entities == len(entities):\n+            return\n+\n+        if node.type in [\n+            \"function_declaration\",\n+            \"method_declaration\",\n+        ]:\n+            entities.append(_build_entity(node, lines, file_path))\n+            if 0 <= max_entities == len(entities):\n+                return\n+\n+        for child in node.children:\n+            walk(child)\n+\n+    walk(root)\n+\n+\n+def _build_entity(node, lines, file_path: str) -> CodeEntity:\n+    \"\"\"\n+    Turn a Tree-sitter node into CodeEntity.", "mimetype": "text/plain", "start_char_idx": 5389, "end_char_idx": 6281, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "3dde735e-011e-407f-a8d1-3b96af634e02", "embedding": null, "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "310eb37a-1bf5-476b-b431-f77372a45e02", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "61e793113c6924523b51713d16c3ad8fd5b2471e601eaff632b45baf6d6b5105", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c47d6b39-3f73-41e4-afc1-82272d10a3eb", "node_type": "1", "metadata": {"issue_id": null, "pr_number": 28, "type": "patch", "files": [".github/workflows/build-docs.yaml", "configs/bug_gen/README.md", "configs/bug_gen/lm_modify.yml", "docs/guides/create_instances.md", "pyproject.toml", "scripts/cheatsheet.sh", "swesmith/bug_gen/adapters/__init__.py", "swesmith/bug_gen/adapters/golang.py", "swesmith/bug_gen/adapters/python.py", "swesmith/bug_gen/criteria.py", "swesmith/bug_gen/llm/modify.py", "swesmith/bug_gen/llm/rewrite.py", "swesmith/bug_gen/llm/utils.py", "swesmith/bug_gen/procedural/generate.py", "swesmith/bug_gen/procedural/operations.py", "swesmith/bug_gen/utils.py", "swesmith/build_repo/create_images.py", "swesmith/build_repo/create_mirror_repo.py", "swesmith/constants.py", "swesmith/harness/log_parsers.py", "swesmith/utils.py", "tests/bug_gen/adapters/test_golang.py", "tests/bug_gen/adapters/test_python.py", "tests/bug_gen/llm/test_utils_llm.py", "tests/bug_gen/test_utils.py", "tests/conftest.py", "tests/harness/test_log_parsers.py", "tests/test_data/files/file.go", "tests/test_data/files/file.py", "tests/test_data/test_output/django-money__django-money.835c1ab8.combine_file__7znr0kum.txt", "tests/test_data/test_output/gin-gonic__gin.3c12d2a8.lm_rewrite__4pb48n1g.txt", "tests/test_utils.py"]}, "hash": "c7229210182ac07e06713ee28d0078e74058443c55af15eb4dbfb7c5ccef1d46", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "+    \"\"\"\n+    # start_point/end_point are (row, col) zero-based\n+    start_row, _ = node.start_point\n+    end_row, _ = node.end_point\n+\n+    # slice out the raw lines\n+    snippet = lines[start_row : end_row + 1]\n+\n+    # detect indent on first line\n+    first = snippet[0]\n+    m = re.match(r\"^(?P<indent>[\\t ]*)\", first)\n+    indent_str = m.group(\"indent\")\n+    # tabs count as size=1, else use count of spaces, fallback to 4\n+    indent_size = 1 if \"\\t\" in indent_str else (len(indent_str) or 4)\n+    indent_level = len(indent_str) // indent_size\n+\n+    # dedent each line\n+    dedented = []\n+    for line in snippet:\n+        if len(line) >= indent_level * indent_size:\n+            dedented.append(line[indent_level * indent_size :])\n+        else:\n+            dedented.append(line.lstrip(\"\\t \"))\n+\n+    return GoEntity(\n+        file_path=file_path,\n+        indent_level=indent_level,\n+        indent_size=indent_size,\n+        line_start=start_row + 1,\n+        line_end=end_row + 1,\n+        node=node,\n+        src_code=\"\\n\".join(dedented),\n+    )\n--- /dev/null\n\n--- swesmith/bug_gen/adapters/python.py ---\n@@ -0,0 +1,129 @@\n+import ast\n+import astor\n+\n+from dataclasses import dataclass\n+from swesmith.constants import TODO_REWRITE\n+from swesmith.utils import CodeEntity\n+\n+\n+@dataclass\n+class PythonEntity(CodeEntity):\n+    @property\n+    def name(self):\n+        return self.node.name\n+\n+    @property\n+    def signature(self):\n+        if isinstance(self.node, ast.ClassDef):\n+            return f\"class {self.node.name}:\"\n+        elif isinstance(self.node, ast.FunctionDef):\n+            args = [ast.unparse(arg) for arg in self.node.args.args]\n+            args_str = \", \".join(args)\n+         ... [diff truncated for embedding] ...", "mimetype": "text/plain", "start_char_idx": 6282, "end_char_idx": 8032, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "b44b4f22-b73a-44d5-bb69-ef2bd19a8054", "embedding": null, "metadata": {"issue_id": null, "pr_number": 31, "type": "patch", "files": [".pre-commit-config.yaml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53e2f175-515e-43a4-9343-59b7a2b7fc2a", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 31, "type": "patch", "files": [".pre-commit-config.yaml"]}, "hash": "1aded67f8d968183ac9cdb3833b46987e3fe376f238a49dafc779eb31985d2bf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #31):\nPatch summary for PR (max 8000 chars):\nFiles changed: .pre-commit-config.yaml\n--- Changes ---\n\n--- .pre-commit-config.yaml ---\n@@ -1,7 +1,7 @@\n repos:\n - repo: https://github.com/astral-sh/ruff-pre-commit\n   # Ruff version\n-  rev: v0.11.11\n+  rev: v0.11.12\n   hooks:\n     # Run the linter\n     - id: ruff", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 336, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "cc8bc142-3abd-4857-8caf-b28835dbefc6", "embedding": null, "metadata": {"issue_id": null, "pr_number": 33, "type": "patch", "files": ["swesmith/harness/__init__.py"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bce39f13-3e49-4617-894c-b901f2080da1", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 33, "type": "patch", "files": ["swesmith/harness/__init__.py"]}, "hash": "f12b0e3120fb90ca53bb11489e1fca1b27080296cd38fe7fc13f45dcabece94d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #33):\nPatch summary for PR (max 8000 chars):\nFiles changed: __init__.py\n--- Changes ---\nNo changes detected", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 133, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "bfc3f0b5-e94a-4243-be40-5d1b03e43bda", "embedding": null, "metadata": {"issue_id": null, "pr_number": 29, "type": "patch", "files": [".github/workflows/pytest.yaml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "03c9b78a-d669-4a54-be39-aa84432bc4d3", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 29, "type": "patch", "files": [".github/workflows/pytest.yaml"]}, "hash": "5f2aa6b57334ca29e40bbe035c685ba22f9ef6e9279653b81e1ca850b6cc30e2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #29):\nPatch summary for PR (max 8000 chars):\nFiles changed: pytest.yaml\n--- Changes ---\n\n--- .github/workflows/pytest.yaml ---\n@@ -50,7 +50,7 @@ jobs:\n       - name: Explicitly convert coverage to xml\n         run: coverage xml\n       - name: Upload coverage reports to Codecov\n-        uses: codecov/codecov-action@v4.0.1\n+        uses: codecov/codecov-action@v5.4.3\n         with:\n           token: ${{ secrets.CODECOV_TOKEN }}\n           slug: SWE-bench/SWE-smith", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 492, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "20e8d66b-8147-4792-95c1-3f201368e5f1", "embedding": null, "metadata": {"issue_id": null, "pr_number": 30, "type": "patch", "files": [".github/workflows/pytest.yaml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2930bbf8-8228-4da6-b012-4049b27c96f7", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 30, "type": "patch", "files": [".github/workflows/pytest.yaml"]}, "hash": "15dc9081ee01ca0af3a9f0145397029a9303b380162476966773f28f374c9c42", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #30):\nPatch summary for PR (max 8000 chars):\nFiles changed: pytest.yaml\n--- Changes ---\n\n--- .github/workflows/pytest.yaml ---\n@@ -30,7 +30,7 @@ jobs:\n         shell: bash -l {0}\n     steps:\n       - name: Checkout code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v4\n       - uses: actions/setup-python@v5\n         with:\n           python-version: '3.10'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 403, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "9a59b502-ced6-42e2-aa6f-d51edacb2f31", "embedding": null, "metadata": {"issue_id": null, "pr_number": 16, "type": "patch", "files": [".pre-commit-config.yaml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "53292075-d200-4746-977e-63ba40f977de", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 16, "type": "patch", "files": [".pre-commit-config.yaml"]}, "hash": "c926f6670a7b843b54173977e48ee19967b27a685344fa8e8f14e8b236f5592a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #16):\nPatch summary for PR (max 8000 chars):\nFiles changed: .pre-commit-config.yaml\n--- Changes ---\n\n--- .pre-commit-config.yaml ---\n@@ -1,7 +1,7 @@\n repos:\n - repo: https://github.com/astral-sh/ruff-pre-commit\n   # Ruff version\n-  rev: v0.11.9\n+  rev: v0.11.11\n   hooks:\n     # Run the linter\n     - id: ruff", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 335, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "a0c36dec-854f-447b-b2a6-1de535000c0b", "embedding": null, "metadata": {"issue_id": null, "pr_number": 12, "type": "patch", "files": [".pre-commit-config.yaml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d075afa-acf3-4845-aeb7-d671f4ee96a1", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 12, "type": "patch", "files": [".pre-commit-config.yaml"]}, "hash": "0afd987764e898b2227b852e2f2e2a9beae274a1384d96f3784dc6777da84423", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #12):\nPatch summary for PR (max 8000 chars):\nFiles changed: .pre-commit-config.yaml\n--- Changes ---\n\n--- .pre-commit-config.yaml ---\n@@ -1,7 +1,7 @@\n repos:\n - repo: https://github.com/astral-sh/ruff-pre-commit\n   # Ruff version\n-  rev: v0.11.8\n+  rev: v0.11.9\n   hooks:\n     # Run the linter\n     - id: ruff", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 334, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "5493ddcf-7e96-4186-a03b-b11720ddbc9d", "embedding": null, "metadata": {"issue_id": null, "pr_number": 5, "type": "patch", "files": [".pre-commit-config.yaml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1ce8b6e8-f306-4ef1-a411-493459fe7b0d", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 5, "type": "patch", "files": [".pre-commit-config.yaml"]}, "hash": "8fd9fa00b07ba5efcc36f324d82aa02162d7080a7ae3dd16cdeef3bcbb8e53d7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #5):\nPatch summary for PR (max 8000 chars):\nFiles changed: .pre-commit-config.yaml\n--- Changes ---\n\n--- .pre-commit-config.yaml ---\n@@ -1,7 +1,7 @@\n repos:\n - repo: https://github.com/astral-sh/ruff-pre-commit\n   # Ruff version\n-  rev: v0.9.6\n+  rev: v0.11.8\n   hooks:\n     # Run the linter\n     - id: ruff", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 332, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "9c12273a-24df-477c-b7e7-9863261de369", "embedding": null, "metadata": {"issue_id": null, "pr_number": 10, "type": "patch", "files": ["docs/index.html", "docs/overrides/main.html"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "93232d98-eee9-4dc4-b52b-3ad48e2d3a16", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 10, "type": "patch", "files": ["docs/index.html", "docs/overrides/main.html"]}, "hash": "72f04016e3b2eb1aba1d14ff9ef71560eba68ec8afa388bada30739ed29edefa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #10):\nPatch summary for PR (max 8000 chars):\nFiles changed: index.html, main.html\n--- Changes ---\n\n--- docs/index.html ---\n@@ -118,7 +118,7 @@ <h3 class=\"subtitle\">\n     <!-- Floating Bubbles -->\n     <div class=\"floating-bubbles\">\n-      <div class=\"floating-bubbles-title\">Affiliated projects</div>\n+      <div class=\"floating-bubbles-title\">Our projects</div>\n       <a href=\"https://swebench.com\" class=\"bubble\" title=\"SWE-bench\">\n         <img src=\"../assets/swebench_logo.png\" alt=\"SWE-bench\">\n         <span class=\"bubble-tooltip\">SWE-bench</span>\n\n--- docs/overrides/main.html ---\n@@ -5,7 +5,7 @@\n <!-- Floating Bubbles -->\n <div class=\"floating-bubbles\">\n-  <div class=\"floating-bubbles-title\">Affiliated projects</div>\n+  <div class=\"floating-bubbles-title\">Our projects</div>\n   <a href=\"https://swebench.com\" class=\"bubble\" title=\"SWE-bench\">\n     <img src=\"{{ 'assets/swebench_logo.png' | url }}\" alt=\"SWE-bench\">\n     <span class=\"bubble-tooltip\">SWE-bench</span>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1003, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "1a890679-09b6-4d37-9f3a-76aaf60798e3", "embedding": null, "metadata": {"issue_id": null, "pr_number": 11, "type": "patch", "files": ["docs/guides/train_swe_agent.md"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "30935a80-c52d-427b-a834-ba5b4baf8bbb", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 11, "type": "patch", "files": ["docs/guides/train_swe_agent.md"]}, "hash": "87808984700ea13a78ecbbf87a2bf879bcbe83a5e4c97c95b46ad10a31bd36f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #11):\nPatch summary for PR (max 8000 chars):\nFiles changed: train_swe_agent.md\n--- Changes ---\n\n--- docs/guides/train_swe_agent.md ---\n@@ -31,8 +31,8 @@ swesmith = load_dataset(\"SWE-bench/SWE-smith\", split=\"train\")\n subset_name = \"subset0\"\n def criteria(task_instance):\n     return \".pr_\" in task_instance[\"instance_id\"] and \\\n-        len(bug[\"FAIL_TO_PASS\"]) <= 5 and \\\n-        len(bug[\"FAIL_TO_PASS\"]) >= 2\n+        len(task_instance[\"FAIL_TO_PASS\"]) <= 5 and \\\n+        len(task_instance[\"FAIL_TO_PASS\"]) >= 2\n bugs = [x for x in swesmith if criteria(x)]\n print(f\"Found {len(bugs)} bugs that match criteria\")\n with open(f\"logs/experiments/{subset_name}.json\", \"w\") as f:", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 701, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, {"id_": "2bf7361a-9e2e-47e7-8968-362252aa8c90", "embedding": null, "metadata": {"issue_id": null, "pr_number": 6, "type": "patch", "files": [".github/workflows/build-docs.yaml", "pyproject.toml"]}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "70067e2a-a20f-4498-99ed-f9589ce812d5", "node_type": "4", "metadata": {"issue_id": null, "pr_number": 6, "type": "patch", "files": [".github/workflows/build-docs.yaml", "pyproject.toml"]}, "hash": "8de61fa8dacce7a064fd1cd3a7c9f3341a3e0aa9e2ccf9f2c7ef11fe6f601ffe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Patch for Issue #None (PR #6):\nPatch summary for PR (max 8000 chars):\nFiles changed: pyproject.toml, build-docs.yaml\n--- Changes ---\n\n--- .github/workflows/build-docs.yaml ---\n@@ -34,7 +34,7 @@ jobs:\n       - name: Install uv\n         run: |\n           curl -LsSf https://astral.sh/uv/install.sh | sh\n-      - run: uv pip install --python ${Python_ROOT_DIR} '.'\n+      - run: uv pip install --python ${Python_ROOT_DIR} '.[docs]'\n       - name: Build Documentation\n         if: github.ref != 'refs/heads/main'\n         run: mkdocs build\n\n--- pyproject.toml ---\n@@ -45,6 +45,7 @@ dependencies = [\n [project.optional-dependencies]\n docs = [\n+    \"mkdocs\",\n     \"mkdocs-material\",\n     \"mkdocs-glightbox\",\n     \"mkdocs-include-markdown-plugin\",", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 740, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}]